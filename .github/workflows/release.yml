name: Release
on:
  workflow_call:

env:
  GITHUB_OWNER: mysteriumnetwork
  GITHUB_REPO: node
  GITHUB_SNAPSHOT_REPO: node-builds
  GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_EC2_METADATA_DISABLED: true
  GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

jobs:
  release-snapshot:
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    strategy:
      max-parallel: 3
      matrix:
        platform:
          - ReleaseGithubSnapshot
          # Nightly build
          # - ReleaseGithubNightly
          - ReleaseDockerSnapshot
          - ReleaseDebianPPASnapshot

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - uses: actions/download-artifact@v4
        with:
          name: env.sh
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Deb build scripts
        run: sudo apt-get install devscripts build-essential lintian dput dh-make

      - name: Release snapshot
        run: |
          source env.sh
          sudo -E go run mage.go -v ${{ matrix.platform }}

      - name: Release Go report
        if: github.ref == 'refs/heads/master'
        run: bin/release_goreport

  release-tag:
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    strategy:
      max-parallel: 4
      matrix:
        platform:
          - ReleaseGithubTag
          - ReleaseDockerTag
          - ReleaseDebianPPAPreRelease
          - ReleaseAndroidSDK
          - ReleaseAndroidProviderSDK

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - uses: actions/download-artifact@v4
        with:
          name: env.sh
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Deb build scripts
        run: sudo apt-get install devscripts build-essential lintian dput dh-make

      - name: Release tag
        run: |
          source build/env.sh
          sudo -E go run mage.go -v ${{ matrix.platform }}

  post-release:
    runs-on: ubuntu-latest
    needs: [release-snapshot, release-tag]
    if: always() && contains(join(needs.*.result, ','), 'success')

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - uses: actions/download-artifact@v4
        with:
          name: env.sh
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify UptimeRobot
        if: github.ref == 'refs/heads/master'
        run: |
          if [ "$NIGHTLY_BUILD" = "1" -o "$NIGHTLY_BUILD" = "T" -o "$NIGHTLY_BUILD" = "true" -o "$NIGHTLY_BUILD" = "True" -o "$NIGHTLY_BUILD" = "TRUE" ]; then
            curl -so /dev/null -I "$NIGHTLY_UPTIMEROBOT"
          fi
      - name: PR Avado
        run: |
          source env.sh
          go run mage.go -v CreateAvadoPR

